@model IEnumerable<FinalYearProject.Models.Category>

@{
    ViewBag.Title = "Index";
}

<h2>Bubble Charts</h2>
<button id="categories" onclick="BugsByCategory()">Bugs By Category</button>
<button id="months" onclick="BugsByMonth()">Bugs By Month</button>
<button id="user" onclick="BugsByUser()">Bugs By User</button>
<svg width="960" height="960" font-family="sans-serif" font-size="10" text-anchor="middle"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>


<script>
    function BugsByCategory() {
        $('svg').html("");
        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        var format = d3.format(",d");

        var color = d3.scaleOrdinal(d3.schemeCategory20c);

        var pack = d3.pack()
            .size([width, height])
            .padding(1.5);

        d3.csv("categories.csv", function (d) {
            d.value = +d.value;
            if (d.value) return d;
        }, function (error, classes) {
            if (error) throw error;

            var root = d3.hierarchy({ children: classes })
                .sum(function (d) { return d.value; })
                .each(function (d) {
                    if (id = d.data.id) {
                        var id, i = id.lastIndexOf(".");
                        d.id = id;
                        d.package = id.slice(0, i);
                        d.class = id.slice(i + 1);
                    }
                });
            var bubble = svg.selectAll(".bubble")
                .data(pack(root).leaves())
                .enter().append("g")
                .attr("class", "bubble")
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });
                            
            bubble.append("circle")
                .attr("id", function (d) { return d.id; })
                .attr("r", function (d) { return d.r; })
                .style("fill", function (d) { return color(d.package); });

            bubble.append("clipPath")
                .attr("id", function (d) { return "clip-" + d.id; })
                .append("use")
                .attr("xlink:href", function (d) { return "#" + d.id; });

            bubble.append("text")
                .attr("clip-path", function (d) { return "url(#clip-" + d.id + ")"; })
                .selectAll("tspan")
                .data(function (d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
                .enter().append("tspan")
                .attr("x", 0)
                .attr("y", function (d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function (d) { return d; });

            bubble.append("title")
                .text(function (d) { return d.id + "\n" + format(d.value); });


            bubble.on("click", click)
            function click(d) {
                $(location).attr('href', '/BugReports');
                sessionStorage.setItem("chartClicked", d.id);
            }
            });

        
    }
</script>
<script>
    function BugsByMonth() {
        $('svg').html("");
        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        var format = d3.format(",d");

        var color = d3.scaleOrdinal(d3.schemeCategory20c);

        var pack = d3.pack()
            .size([width, height])
            .padding(1.5);

        d3.csv("months.csv", function (d) {
            d.value = +d.value;
            if (d.value) return d;
        }, function (error, classes) {
            if (error) throw error;

            var root = d3.hierarchy({ children: classes })
                .sum(function (d) { return d.value; })
                .each(function (d) {
                    if (id = d.data.id) {
                        var id, i = id.lastIndexOf(".");
                        d.id = id;
                        d.package = id.slice(0, i);
                        d.class = id.slice(i + 1);
                    }
                });

            var bubble = svg.selectAll(".bubble")
                .data(pack(root).leaves())
                .enter().append("g")
                .attr("class", "bubble")
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

            bubble.append("circle")
                .attr("id", function (d) { return d.id; })
                .attr("r", function (d) { return d.r; })
                .style("fill", function (d) { return color(d.package); });

            bubble.append("clipPath")
                .attr("id", function (d) { return "clip-" + d.id; })
                .append("use")
                .attr("xlink:href", function (d) { return "#" + d.id; });

            bubble.append("text")
                .attr("clip-path", function (d) { return "url(#clip-" + d.id + ")"; })
                .selectAll("tspan")
                .data(function (d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
                .enter().append("tspan")
                .attr("x", 0)
                .attr("y", function (d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function (d) { return d; });

            bubble.append("title")
                .text(function (d) { return d.id + "\n" + format(d.value); });
        });
    }
</script>
<script>
    function BugsByUser() {
        $('svg').html("");
        var svg = d3.select("svg"),
            width = +svg.attr("width"),
            height = +svg.attr("height");

        var format = d3.format(",d");

        var color = d3.scaleOrdinal(d3.schemeCategory20c);

        var pack = d3.pack()
            .size([width, height])
            .padding(1.5);

        d3.csv("BugsByUser.csv", function (d) {
            d.value = +d.value;
            if (d.value) return d;
        }, function (error, classes) {
            if (error) throw error;

            var root = d3.hierarchy({ children: classes })
                .sum(function (d) { return d.value; })
                .each(function (d) {
                    if (id = d.data.id) {
                        var id, i = id.lastIndexOf(".");
                        d.id = id;
                        d.package = id.slice(0, i);
                        d.class = id.slice(i + 1);
                    }
                });

            var bubble = svg.selectAll(".bubble")
                .data(pack(root).leaves())
                .enter().append("g")
                .attr("class", "bubble")
                .attr("transform", function (d) { return "translate(" + d.x + "," + d.y + ")"; });

            bubble.append("circle")
                .attr("id", function (d) { return d.id; })
                .attr("r", function (d) { return d.r; })
                .style("fill", function (d) { return color(d.package); });

            bubble.append("clipPath")
                .attr("id", function (d) { return "clip-" + d.id; })
                .append("use")
                .attr("xlink:href", function (d) { return "#" + d.id; });

            bubble.append("text")
                .attr("clip-path", function (d) { return "url(#clip-" + d.id + ")"; })
                .selectAll("tspan")
                .data(function (d) { return d.class.split(/(?=[A-Z][^A-Z])/g); })
                .enter().append("tspan")
                .attr("x", 0)
                .attr("y", function (d, i, nodes) { return 13 + (i - nodes.length / 2 - 0.5) * 10; })
                .text(function (d) { return d; });

            bubble.append("title")
                .text(function (d) { return d.id + "\n" + format(d.value); });

            });

        
    }
</script>

